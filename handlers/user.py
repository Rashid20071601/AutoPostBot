# Import libraries
from aiogram import Bot
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
import logging

from lexicon import lexicon_ru
from keyboards import keyboard_utils
from config.config import BOT_TOKEN
from states.states import PostState



# --------------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è --------------- #
bot = Bot(token=BOT_TOKEN)

logger = logging.getLogger(__name__)



# ========================= –•–µ–Ω–¥–ª–µ—Ä—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –ø–æ–º–æ—â–∏ ========================= #
# /start
async def send_welcome(message: Message):
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É '/start'...")
    await message.answer(
        lexicon_ru.send_welcome,
        reply_markup=keyboard_utils.admin_main_kb(),
        parse_mode="HTML"
    )
    logger.info("–ë–æ—Ç –æ—Ç–≤–µ—Ç–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")

# /help
async def send_help(message: Message):
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É '/help'")
    await message.answer(lexicon_ru.help, parse_mode="HTML")
    logger.info("–ë–æ—Ç –æ—Ç–≤–µ—Ç–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")



# ========================= –•–µ–Ω–¥–ª–µ—Ä—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ ========================= #
# –ó–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞
async def handle_create_mailing(callback: CallbackQuery, state: FSMContext):
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç'...")
    await callback.message.edit_text(
        lexicon_ru.get_post,
        reply_markup=keyboard_utils.back_to_menu_kb(),
        parse_mode="HTML"
    )

    await state.set_state(PostState.text)
    await callback.answer()
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø–µ—Ä–µ—à–µ–ª –≤ —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞!")

# –ó–∞–ø—Ä–æ—Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
async def handle_mailing_text(message: Message, state: FSMContext):
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞...")
    await state.update_data(text=message.text)
    await message.answer(
        lexicon_ru.get_interval,
        reply_markup=keyboard_utils.back_to_menu_kb(),
        parse_mode="HTML"
    )
    await state.set_state(PostState.interval)
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –∏–Ω—Ç–µ—Ä–≤–∞–ª!")

# –ó–∞–ø—Ä–æ—Å ID –≥—Ä—É–ø–ø—ã
async def handle_mailing_interval(message: Message, state: FSMContext):
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –∏–Ω—Ç–µ—Ä–≤–∞–ª")
    try:
        logger.debug("–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤ int...")
        interval = int(message.text)
        if interval < 1:
            logger.exception("–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–Ω—å—à–µ 1!")
            raise ValueError
        await state.update_data(interval=interval)
        await message.answer(
            lexicon_ru.get_chanel_id,
            reply_markup=keyboard_utils.back_to_menu_kb(),
            parse_mode="HTML",
        )
        await state.set_state(PostState.chanel)
        logger.info("–ò–Ω—Ç–µ—Ä–≤–∞–ª {interval} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    except ValueError:
        logger.exception("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª!")
        await message.answer(
            lexicon_ru.get_interval_error,
            parse_mode="HTML"
        )
        await state.clear()
        await send_welcome(message=message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–∞
async def handle_mailing_chanel(message: Message, state: FSMContext):
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª ID –≥—Ä—É–ø–ø—ã...")
    try:
        logger.debug("–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ ID –≥—Ä—É–ø–ø—ã –≤ int...")
        chanel_id = int(message.text)
    except ValueError:
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≥—Ä—É–ø–ø—ã!")
        message.answer(
            lexicon_ru.get_chanel_id_error,
            parse_mode="HTML"
        )
        await state.clear()
        await send_welcome(message=message)

    try:
        logger.debug("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É...")
        test_msg = await bot.send_message(chanel_id, lexicon_ru.test_message)
        await bot.delete_message(chanel_id, test_msg.message_id)
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É!")
        await message.answer(
            lexicon_ru.post_message_error,
            parse_mode="HTML",
        )
        await state.clear()
        await send_welcome(message=message)

    await message.answer(
        "‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b> üéâ\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é.",
        parse_mode="HTML"
    )
    await state.clear()


# ========================= –•–µ–Ω–¥–ª–µ—Ä—ã –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" ========================= #
async def back_to_menu(callback: CallbackQuery, state: FSMContext):
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥'...")
    await state.clear()

    await callback.message.edit_text(
        lexicon_ru.send_welcome,
        reply_markup=keyboard_utils.admin_main_kb(),
        parse_mode="HTML"
    )

    await callback.answer()
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!")